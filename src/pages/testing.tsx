// Example usage in a React component
import React, { useEffect } from 'react';
import { usePorcupine } from './PorcupineWakeWord';
import { BuiltInKeyword } from '@picovoice/porcupine-web';

import {
    PorcupineModel,
  } from '@picovoice/porcupine-web';
  

const ACCESS_KEY = 'V8ZLdwTq3DHObCXeTZjWPOJs1ciBCmjvjIJNE7O3HTDQQXD2kuBcog=='; // Replace with your actual API key
var heyEduNexusBase64 = "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";

const porcupineModel: PorcupineModel = {
  base64: heyEduNexusBase64,
};


const testing: React.FC = () => {
  const { init, start, stop, isLoaded, isListening, error, keywordDetection } = usePorcupine();

  useEffect(() => {
    init(ACCESS_KEY,[BuiltInKeyword.Porcupine], porcupineModel)
      .then(() => {
        console.log('Porcupine initialized');
      })
      .catch((e) => {
        console.error('Initialization failed:', e);
      });

    return () => {
      stop();
    };
  }, [init]);

  return (
    <div>
      <h1>Porcupine Wake Word Detection</h1>
      <p>Status: {isListening ? "Listening..." : "Not Listening"}</p>
      <p>{keywordDetection && `Detected: ${keywordDetection.label}`}</p>
      <p>{error && `Error: ${error.message}`}</p>
      <button onClick={() => start()} disabled={isListening || !isLoaded}>Start Listening</button>
      <button onClick={() => stop()} disabled={!isListening}>Stop Listening</button>
    </div>
  );
};

export default testing;
